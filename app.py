from flask import Flask, jsonify, send_from_directory, request, render_template
import json
import os
from datetime import datetime, timedelta
import logging
from gigachat_api import query_gigachat_for_feedback
import hashlib
import time

app = Flask(__name__, static_folder="public")
DATA_FILE = 'user_history.json'
logging.basicConfig(level=logging.INFO)


LEVEL_ACHIEVEMENTS = {
    1: "–£—á–µ–Ω–∏–∫–∏ –ò–ò",
    5: "–ü–æ–¥–º–∞—Å—Ç–µ—Ä—å–µ TeachAI",
    10: "–ò–Ω–∂–µ–Ω–µ—Ä –ü—Ä–æ–º–ø—Ç–æ–≤",
    15: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –†–∞–∑—É–º–∞",
    20: "–ú–∞—Å—Ç–µ—Ä –ò–ò",
    25: "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ú–æ–¥–µ–ª–µ–π",
    30: "TeachAI: –õ–µ–≥–µ–Ω–¥–∞",
    35: "–ê–ª—Ö–∏–º–∏–∫ –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
    40: "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ó–Ω–∞–Ω–∏–π",
    45: "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏",
    50: "–°–æ–∑–¥–∞—Ç–µ–ª—å –°–æ–∑–Ω–∞–Ω–∏–π",
    55: "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ù–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    60: "–í–µ—Ä—à–∏—Ç–µ–ª—å –ü—Ä–æ–º–ø—Ç–æ–≤",
    65: "–î–µ–º–∏—Å—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ò–ò",
    70: "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π –†–∞–∑—É–º–∞",
    75: "TeachAI: –ë–µ—Å—Å–º–µ—Ä—Ç–Ω–∞—è –°–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"
}

LEVEL_THRESHOLDS = [
     0,     # –£—Ä–æ–≤–µ–Ω—å 1
   350,     # –£—Ä–æ–≤–µ–Ω—å 2
   750,     # –£—Ä–æ–≤–µ–Ω—å 3
  1200,     # –£—Ä–æ–≤–µ–Ω—å 4
  1700,     # –£—Ä–æ–≤–µ–Ω—å 5
  2200,     # –£—Ä–æ–≤–µ–Ω—å 6
  2750,     # –£—Ä–æ–≤–µ–Ω—å 7
  3300,     # –£—Ä–æ–≤–µ–Ω—å 8
  3900,     # –£—Ä–æ–≤–µ–Ω—å 9
  4500,     # –£—Ä–æ–≤–µ–Ω—å 10
  5150,     # –£—Ä–æ–≤–µ–Ω—å 11
  5800,     # –£—Ä–æ–≤–µ–Ω—å 12
  6500,     # –£—Ä–æ–≤–µ–Ω—å 13
  7200,     # –£—Ä–æ–≤–µ–Ω—å 14
  7950,     # –£—Ä–æ–≤–µ–Ω—å 15
  8700,     # –£—Ä–æ–≤–µ–Ω—å 16
  9500,     # –£—Ä–æ–≤–µ–Ω—å 17
 10300,     # –£—Ä–æ–≤–µ–Ω—å 18
 11100,     # –£—Ä–æ–≤–µ–Ω—å 19
 11950,     # –£—Ä–æ–≤–µ–Ω—å 20
 12800,     # –£—Ä–æ–≤–µ–Ω—å 21
 13700,     # –£—Ä–æ–≤–µ–Ω—å 22
 14650,     # –£—Ä–æ–≤–µ–Ω—å 23
 15600,     # –£—Ä–æ–≤–µ–Ω—å 24
 16600,     # –£—Ä–æ–≤–µ–Ω—å 25
 17600,     # –£—Ä–æ–≤–µ–Ω—å 26
 18650,     # –£—Ä–æ–≤–µ–Ω—å 27
 19700,     # –£—Ä–æ–≤–µ–Ω—å 28
 20800,     # –£—Ä–æ–≤–µ–Ω—å 29
 21900,     # –£—Ä–æ–≤–µ–Ω—å 30
 23050,     # –£—Ä–æ–≤–µ–Ω—å 31
 24200,     # –£—Ä–æ–≤–µ–Ω—å 32
 25400,     # –£—Ä–æ–≤–µ–Ω—å 33
 26600,     # –£—Ä–æ–≤–µ–Ω—å 34
 27850,     # –£—Ä–æ–≤–µ–Ω—å 35
 29100,     # –£—Ä–æ–≤–µ–Ω—å 36
 30400,     # –£—Ä–æ–≤–µ–Ω—å 37
 31700,     # –£—Ä–æ–≤–µ–Ω—å 38
 33050,     # –£—Ä–æ–≤–µ–Ω—å 39
 34400,     # –£—Ä–æ–≤–µ–Ω—å 40
 35800,     # –£—Ä–æ–≤–µ–Ω—å 41
 37200,     # –£—Ä–æ–≤–µ–Ω—å 42
 38650,     # –£—Ä–æ–≤–µ–Ω—å 43
 40100,     # –£—Ä–æ–≤–µ–Ω—å 44
 41600,     # –£—Ä–æ–≤–µ–Ω—å 45
 43100,     # –£—Ä–æ–≤–µ–Ω—å 46
 44650,     # –£—Ä–æ–≤–µ–Ω—å 47
 46200,     # –£—Ä–æ–≤–µ–Ω—å 48
 47800,     # –£—Ä–æ–≤–µ–Ω—å 49
 49400,     # –£—Ä–æ–≤–µ–Ω—å 50
 51050,     # –£—Ä–æ–≤–µ–Ω—å 51
 52700,     # –£—Ä–æ–≤–µ–Ω—å 52
 54400,     # –£—Ä–æ–≤–µ–Ω—å 53
 56100,     # –£—Ä–æ–≤–µ–Ω—å 54
 57850,     # –£—Ä–æ–≤–µ–Ω—å 55
 59600,     # –£—Ä–æ–≤–µ–Ω—å 56
 61400,     # –£—Ä–æ–≤–µ–Ω—å 57
 63200,     # –£—Ä–æ–≤–µ–Ω—å 58
 65050,     # –£—Ä–æ–≤–µ–Ω—å 59
 66900,     # –£—Ä–æ–≤–µ–Ω—å 60
 68800,     # –£—Ä–æ–≤–µ–Ω—å 61
 70700,     # –£—Ä–æ–≤–µ–Ω—å 62
 72650,     # –£—Ä–æ–≤–µ–Ω—å 63
 74600,     # –£—Ä–æ–≤–µ–Ω—å 64
 76600,     # –£—Ä–æ–≤–µ–Ω—å 65
 78600,     # –£—Ä–æ–≤–µ–Ω—å 66
 80650,     # –£—Ä–æ–≤–µ–Ω—å 67
 82700,     # –£—Ä–æ–≤–µ–Ω—å 68
 84800,     # –£—Ä–æ–≤–µ–Ω—å 69
 86900,     # –£—Ä–æ–≤–µ–Ω—å 70
 89050,     # –£—Ä–æ–≤–µ–Ω—å 71
 91200,     # –£—Ä–æ–≤–µ–Ω—å 72
 93400,     # –£—Ä–æ–≤–µ–Ω—å 73
 95600,     # –£—Ä–æ–≤–µ–Ω—å 74
 97850      # –£—Ä–æ–≤–µ–Ω—å 75
]

def update_level(users, user_id):
    xp = users[user_id]['experience']
    current_level = users[user_id]['level']
    new_level = 1
    new_achievements = []

    for i, threshold in enumerate(LEVEL_THRESHOLDS):
        if xp >= threshold:
            new_level = i + 1
        else:
            break

    if new_level > current_level:
        users[user_id]['level'] = new_level

        for lvl, achievement in LEVEL_ACHIEVEMENTS.items():
            if new_level >= lvl and achievement not in users[user_id]['achievements']:
                users[user_id]['achievements'].append(achievement)
                new_achievements.append(achievement)

    return new_achievements  # üëà –í–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

def get_level_by_experience(exp):
    for i in reversed(range(len(LEVEL_THRESHOLDS))):
        if exp >= LEVEL_THRESHOLDS[i]:
            return i + 1
    return 1

def get_user_id_by_username(username):
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
    for user_id, user_data in data['users'].items():
        if user_data.get('username') == username:
            return user_id
    return None


@app.route('/courses/<username>')
def courses(username):
    user_id = get_user_id_by_username(username)
    if not user_id:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return render_template('courses.html', user_id=user_id)

@app.route('/')
def index():
    return send_from_directory(app.static_folder, 'index.html')



def load_users():
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
        return data.get("users", {})  # <-- –≤–æ—Ç –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç

def save_users(users):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump({"users": users}, f, ensure_ascii=False, indent=4)

@app.route('/api/analyze', methods=['POST'])
def analyze_prompt():
    try:
        print("–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ DATA_FILE:", os.path.abspath(DATA_FILE))
        data = request.get_json()
        prompt = data.get('prompt', '').strip()
        user_id = str(data.get('user_id'))

        if not prompt:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç'}), 400
        if not user_id:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω user_id'}), 400

        users = load_users()
        print(users.keys())

        if user_id not in users:
            return jsonify({'error': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        # === –ê–ù–¢–ò–°–ü–ê–ú-–ü–†–û–í–ï–†–ö–ò ===

        # 1. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)
        now = time.time()
        last_time = users[user_id].get('last_prompt_time', 0)
        if now - last_time < 10:
            return jsonify({'error': '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.'}), 429
        users[user_id]['last_prompt_time'] = now

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞
        if len(prompt) < 10:
            return jsonify({'error': '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.'}), 400

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
        def hash_prompt(text):
            return hashlib.sha256(text.encode()).hexdigest()
        prompt_hash = hash_prompt(prompt)
        last_prompt_hash = users[user_id].get('last_prompt_hash')
        if last_prompt_hash == prompt_hash:
            return jsonify({'error': '–ü—Ä–æ–º–ø—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–ø—ã—Ç –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω.'}), 400
        users[user_id]['last_prompt_hash'] = prompt_hash

        # === –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ ===
        users[user_id]['experience'] += 20
        update_level(users, user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        save_users(users)

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ GigaChat API)
        result = query_gigachat_for_feedback(prompt)

        return jsonify({'analysis': result})
    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500
    
def get_user_league(level: int):
    leagues = [
        {"name": "–ò—Å–∫–∞—Ç–µ–ª–∏ –ò—Å–∫—Ä—ã", "emoji": "ü™ô", "color": "#a58c6f", "min": 1, "max": 4},
        {"name": "–ü–æ–¥–º–∞—Å—Ç–µ—Ä—å—è –ü—Ä–æ–º–ø—Ç–æ–≤", "emoji": "üß±", "color": "#bb7e5d", "min": 5, "max": 9},
        {"name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—ã –†–∞–∑—É–º–∞", "emoji": "‚öôÔ∏è", "color": "#6b7b8c", "min": 10, "max": 19},
        {"name": "–í–ª–∞–¥—ã–∫–∏ –ú–æ–¥–µ–ª–µ–π", "emoji": "üß†", "color": "#a9a9a9", "min": 20, "max": 34},
        {"name": "–°–æ–∑–¥–∞—Ç–µ–ª–∏ –°–æ–∑–Ω–∞–Ω–∏–π", "emoji": "üî•", "color": "#f4c542", "min": 35, "max": 49},
        {"name": "–õ–µ–≥–µ–Ω–¥—ã –ò–ò", "emoji": "üíé", "color": "#4ecdc4", "min": 50, "max": 64},
        {"name": "–°–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏", "emoji": "üåÄ", "color": "#9c27b0", "min": 65, "max": 75}
    ]

    for league in leagues:
        if league["min"] <= level <= league["max"]:
            return {
                "name": league["name"],
                "emoji": league["emoji"],
                "color": league["color"]
            }

    return {
        "league_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –õ–∏–≥–∞",
        "emoji": "‚ùì",
        "color": "#cccccc"
    }



@app.route('/api/user/<int:user_id>')

def get_user_data(user_id):
    try:
        with open('user_history.json', 'r', encoding='utf-8') as f:
            users = json.load(f)

        user_data = users.get("users", {}).get(str(user_id))
        app.logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω user_id: {user_id}")

        if user_data:
            level = user_data.get('level', 1)
            league = get_user_league(level)

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–≥—É –≤ –æ—Ç–≤–µ—Ç
            user_data['league'] = league
            return jsonify(user_data)
        else:
            return jsonify({
                'level': 1,
                'experience': 0,
                'achievements': [],
                'league': get_user_league(1)
            })
    except FileNotFoundError:
        return jsonify({'error': '–§–∞–π–ª user_history.json –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 500
    except json.JSONDecodeError:
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON'}), 500
    except Exception as e:
        app.logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        return jsonify({'error': str(e)}), 500
@app.route('/api/leaderboard')
def get_leaderboard():
    try:
        with open('user_history.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            users = data.get("users", {})

        leaderboard = [
            {
                "user_id": user_id,
                "username": info.get("username", "unknown"),
                "level": info.get("level", 0),
                "experience": info.get("experience", 0),
                "league": get_user_league(info.get("level", 0))
            }
            for user_id, info in users.items()
        ]

        leaderboard.sort(key=lambda x: (-x["experience"], -x["level"]))
        return jsonify(leaderboard[:50])

    except Exception as e:
        app.logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
        return jsonify({"error": str(e)}), 500
SUBSCRIPTION_COST = 500

@app.route('/api/user/<int:user_id>/subscribe', methods=['POST'])
def buy_subscription(user_id):
    try:
        data = request.get_json()
        payment_token = data.get("payment_token")

        if not payment_token:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –æ–ø–ª–∞—Ç—ã'}), 400

        with open('user_history.json', 'r', encoding='utf-8') as f:
            data_file = json.load(f)

        users = data_file.setdefault("users", {})
        user = users.get(str(user_id))

        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        expiry_str = user.get("subscription_expiry")
        if expiry_str:
            expiry_date = datetime.fromisoformat(expiry_str)
            if expiry_date > datetime.utcnow():
                return jsonify({'message': '–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞', 'subscription_expiry': expiry_str}), 200

        # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å)
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω

        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        new_expiry = datetime.utcnow() + timedelta(days=30)
        user["is_subscribed"] = True
        user["subscription_expiry"] = new_expiry.isoformat()

        with open('user_history.json', 'w', encoding='utf-8') as f:
            json.dump(data_file, f, ensure_ascii=False, indent=2)

        return jsonify({
            'message': '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
            'subscription_expiry': user["subscription_expiry"]
        })

    except FileNotFoundError:
        return jsonify({'error': '–§–∞–π–ª user_history.json –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 500
    except Exception as e:
        app.logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        return jsonify({'error': str(e)}), 500

@app.route('/api/user/<int:user_id>/payment-confirmed', methods=['POST'])
def confirm_payment(user_id):
    try:
        data = request.get_json()
        telegram_payment_charge_id = data.get("telegram_payment_charge_id")

        if not telegram_payment_charge_id:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram Payment Charge ID'}), 400

        with open('user_history.json', 'r', encoding='utf-8') as f:
            data_file = json.load(f)

        users = data_file.setdefault("users", {})
        user = users.get(str(user_id))

        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        new_expiry = datetime.utcnow() + timedelta(days=30)
        user["is_subscribed"] = True
        user["subscription_expiry"] = new_expiry.isoformat()
        user["last_payment_id"] = telegram_payment_charge_id

        with open('user_history.json', 'w', encoding='utf-8') as f:
            json.dump(data_file, f, ensure_ascii=False, indent=2)

        return jsonify({
            'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
            'subscription_expiry': user["subscription_expiry"]
        })

    except Exception as e:
        app.logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")
        return jsonify({'error': str(e)}), 500


    


def save_user_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def calculate_level(experience):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—É—â–µ–º—É –æ–ø—ã—Ç—É
    level = 1
    for lvl, exp_required in sorted(LEVEL_THRESHOLDS.items()):
        if experience >= exp_required:
            level = lvl
    return level

@app.route('/api/complete-task', methods=['POST'])
def complete_task():
    try:
        data = request.get_json()
        user_id = str(data.get('user_id'))
        task_id = data.get('task_id')

        if not user_id or not task_id:
            return jsonify({'success': False, 'message': 'user_id –∏–ª–∏ task_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}), 400

        users = load_users()
        if user_id not in users:
            return jsonify({'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        user_data = users[user_id]

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        if 'completed_tasks' not in user_data:
            user_data['completed_tasks'] = []

        if 'experience' not in user_data:
            user_data['experience'] = 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
        if task_id in user_data['completed_tasks']:
            return jsonify({'success': False, 'message': '–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}), 400

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        
        user_data['completed_tasks'].append(task_id)
        logging.info(f"[{user_id}] Before XP: {user_data.get('experience')}")
        user_data['experience'] += 50
        logging.info(f"[{user_id}] After XP: {user_data.get('experience')}")

        update_level(users, user_id)  # –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–∂–µ –º–µ–Ω—è–ª–∞ users[user_id]

        save_users(users)  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

        return jsonify({'success': True})
    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': str(e)}), 500
@app.route('/api/get_completed_tasks', methods=['GET'])
def get_completed_tasks():
    user_id = request.args.get('userId')  # –ø–µ—Ä–µ–¥–∞–π userId —Å —Ñ—Ä–æ–Ω—Ç–∞
    course_id = request.args.get('courseId')

    with open('user_history.json', 'r') as f:
        user_history = json.load(f)

    user_data = user_history.get(user_id, {'completed_tasks': [], 'exp': 0, 'level': 1})
    completed = [t for t in user_data['completed_tasks'] if t.startswith(course_id)]

    return jsonify({'completedTasks': completed})














@app.route('/<path:path>')
def static_files(path):
    response = send_from_directory(app.static_folder, path)
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    return response
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 3000))
    app.run(debug=True, port=3000)
    
