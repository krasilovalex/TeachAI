import os
import json
import requests
from dotenv import load_dotenv

load_dotenv("as.env")

YANDEXGPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
IAM_TOKEN = os.getenv("IAM_TOKEN")
FOLDER_ID = os.getenv("FOLDER_ID")
MODEL_URI = f"gpt://{FOLDER_ID}/yandexgpt/latest"

USER_HISTORY_PATH = "user_history.json"

LESSONS = {
    "1.1": {
        "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
        "theory_id": "theory-1-1",
        "practice_id": "practice-1-1"
    },
    "1.2": {
        "title": "–ì–¥–µ –º—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è —Å –ò–ò",
        "theory_id": "theory-1-2",
        "practice_id": "practice-1-2"
    },
    "1.3": {
        "title": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ò–ò",
        "theory_id": "theory-1-3",
        "practice_id": "practice-1-3"
    }
}

def load_user_history():
    try:
        with open(USER_HISTORY_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_history(history):
    with open(USER_HISTORY_PATH, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def build_prompt(user_profile, message):
    return f"""
–¢–µ–±—è –∑–æ–≤—É—Ç ‚Äî TeachAI-Mentor. –¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –æ–±—É—á–µ–Ω–∏—é –ò–ò, Python –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ ü§ñüìò –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏. –û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –°—Ç–∏–ª—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ü–µ–ø–æ—á–∫—É —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π (chain-of-thought), —Å–æ—Ñ–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ (socratic questioning), –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω –∏ Markdown-—Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å–ø–∏—Å–∫–∏).

üß† –£—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞: {user_profile.get('level', '–Ω–∞—á–∞–ª—å–Ω—ã–π')}
üéØ –¶–µ–ª—å —É—á–µ–Ω–∏–∫–∞: {user_profile.get('goal', '–Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ò–ò')}
‚ö†Ô∏è –ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏: {', '.join(user_profile.get('weaknesses', [])) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞:
\"{message}\"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.
"""

def query_yandexgpt(prompt):
    headers = {
        "Authorization": f"Bearer {IAM_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": MODEL_URI,
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 400
        },
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –≥–æ–≤–æ—Ä–∏—à—å —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–µ–π –º–∞–Ω–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏ –∏ –∞–±–∑–∞—Ü—ã."},
            {"role": "user", "text": prompt}
        ]
    }
    response = requests.post(YANDEXGPT_API_URL, headers=headers, json=data)
    response.raise_for_status()
    return response.json()["result"]["alternatives"][0]["message"]["text"]

def generate_response(user_id, message):
    history = load_user_history()
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏
    user_data = history.get(user_id, {})
    user_data.setdefault("level", "–Ω–∞—á–∞–ª—å–Ω—ã–π")
    user_data.setdefault("goal", "–∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –ò–ò")
    user_data.setdefault("weaknesses", [])
    user_data.setdefault("chat", [])
    user_data.setdefault("lesson_progress", "1.1")
    user_data.setdefault("progress", {})
    user_data["progress"].setdefault("lesson_progress", user_data["lesson_progress"])
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    prompt = build_prompt(user_data, message)
    reply = query_yandexgpt(prompt)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    lesson_id = user_data["progress"].get("lesson_progress", "1.1")
    lesson = LESSONS.get(lesson_id)
    if lesson:
        title = lesson["title"]
        theory_link = f"#{lesson['theory_id']}"
        practice_link = f"#{lesson['practice_id']}"
        reply += (
            f"\n\nüìò _–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥_: –ø–µ—Ä–µ–π–¥–∏ –∫ [—Ç–µ–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–∫—É ¬´{title}¬ª]({theory_link}) "
            f"–∏ –≤—ã–ø–æ–ª–Ω–∏ [–ø—Ä–∞–∫—Ç–∏–∫—É]({practice_link}). –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ"
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    user_data["chat"].append({"q": message, "a": reply})
    history[user_id] = user_data
    save_user_history(history)

    return reply
