import requests
import uuid
import urllib3

# üîï –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL (–∏—Å–ø–æ–ª—å–∑—É–µ–º verify=False)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# üîê Authorization Key (Base64 –æ—Ç client_id:client_secret)
AUTH_KEY = "YTJiMDA1MjQtMDQzZC00Nzg2LWExZmEtMmQyZGQzYjAyNTc4Ojg5YmJlZTBkLTdlMjUtNDQxNC1hODk0LTY3YmQwZGM2MTQ1NQ=="

# üîó URL-—ã
TOKEN_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
GIGACHAT_API_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

# üéü –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
def get_gigachat_token():
    try:
        response = requests.post(
            TOKEN_URL,
            headers={
                "Authorization": f"Basic {AUTH_KEY}",
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json",
                "RqUID": str(uuid.uuid4())
            },
            data={"scope": "GIGACHAT_API_PERS"},
            verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫—É
        )
        response.raise_for_status()
        return response.json().get("access_token")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GigaChat
def query_gigachat_for_feedback(prompt):
    token = get_gigachat_token()
    if not token:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞."

    try:
        response = requests.post(
            GIGACHAT_API_URL,
            headers={
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            },
           json = {
    "model": "GigaChat:latest",
    "messages": [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ, —Ç–µ–ø–ª–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤–æ–π, –Ω–æ —É–º–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è."
        },
        {
            "role": "user",
            "content": f"–†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n{prompt}"
        }
    ],
    "temperature": 0.7
},
            timeout=60,
            verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫—É
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.exceptions.Timeout:
        return "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.RequestException as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: {e}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ GigaChat: {e}"

# üëÄ –û–±—ë—Ä—Ç–∫–∞
def analyze_prompt_with_gigachat(prompt):
    return query_gigachat_for_feedback(prompt)
